module Swank
  module Decorators
    module DecorationInjection
      module SharedModuleLevelBehavior
        def clone: (*untyped) -> Module

        def decorator_chains: () -> Hash[Symbol, Swank::Decorators::DecoratorBase]

        def add_to_decorator_chain!: (Symbol method_name, Swank::Decorators::DecoratorBase decorator_chain) -> void

        def create_decoration_method!: (Symbol method_name) -> void
      end

      module SharedPrependedBehavior
        def run_decorations: (Symbol method_name, *untyped args, **untyped kwargs) { () -> untyped } -> untyped

        def fetch_swank_decorator_chain: (Symbol method_name) -> Swank::Decorators::DecoratorBase
      end

      module InstanceLevel
        extend SharedModuleLevelBehavior

        include SharedPrependedBehavior

        def self.const_name: () -> Symbol

        def self.prepend_to: (Class | Module obj) -> void

        def fetch_swank_decorator_chain: (Symbol method_name) -> Swank::Decorators::DecoratorBase
      end

      module SingletonLevel
        extend SharedModuleLevelBehavior

        include SharedPrependedBehavior

        def self.const_name: () -> Symbol

        def self.prepend_to: (Class | Module obj) -> untyped

        def fetch_swank_decorator_chain: (Symbol method_name) -> Swank::Decorators::DecoratorBase
      end
    end
  end
end
