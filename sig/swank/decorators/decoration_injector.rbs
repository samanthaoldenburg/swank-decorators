module Swank
  module Decorators
    class DecorationInjector
      module MethodAddedHooks
        def method_added: (Symbol method_name) -> void

        def singleton_method_added: (Symbol method_name) -> void

        private

        def decoration_injector: () -> Swank::Decorators::DecorationInjector
      end

      attr_reader subject: Class | Module

      attr_reader queued_decorations: Swank::Decorators::DecoratorBase

      def self.bind: (Class | Module subject) -> Swank::Decorators::DecorationInjector

      def initialize: (Class | Module subject) -> void

      def queue_decoration: (Symbol decorator_name, *untyped args, **untyped kwargs) { () -> untyped } -> void

      def inject_decorations!: (Symbol method_name, mode: :instance | :singleton) -> void

      def register_decorators!: (Module decorators_module) -> void

      def decorators: () -> Hash[Symbol, Class[Swank::Decorators::DecoratorBase]]

      def define_decorator_methods!: (Symbol decorator_name) -> void

      private

      def fetch_decorator_injection_module: (Module base_module) -> Module

      def decoration_injection_base_module: (:instance | :singleton scope) -> Module

      def register_decorator!: (Symbol decorator_name, Class[Swank::Decorators::DecoratorBase] decorator_class) -> void
    end
  end
end
