module Swank
  module Decorators
    class DecoratorBase
      self.@decorator_name: Symbol

      self.@wrap_block: Proc

      @nested: instance

      def self.setup: (Symbol decorator_name, Proc wrap_block) -> void

      attr_reader self.decorator_name: Symbol

      attr_reader self.wrap_block: Proc

      def decorator_name: () -> Symbol

      def wrap_block: () -> Proc

      attr_reader nested: instance 

      def add_to_chain!: (instance decorator) -> void

      def final?: () -> bool
    end
  end
end
